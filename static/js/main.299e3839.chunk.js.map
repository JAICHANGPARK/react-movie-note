{"version":3,"sources":["logo.svg","Movie.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","MovieGenre","_ref","genres","react_default","a","createElement","className","MoviePoster","_ref2","poster","alt","src","title","Movie","console","log","this","props","map","genre","index","key","synopsis","Component","App","state","_getMovies","_callee","movies","regenerator_default","wrap","_context","prev","next","_this","_callApi","sent","setState","stop","fetch","then","response","json","data","catch","err","_renderMovies","movie","_","src_Movie_0","medium_cover_image","id","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6IAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,kOCyCxC,SAASC,EAATC,GAAgC,IAAVC,EAAUD,EAAVC,OAClB,OACIC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBAAgBJ,EAAhC,KAcR,SAASK,EAATC,GAAsC,IAAfC,EAAeD,EAAfC,OAAQC,EAAOF,EAAPE,IAC3B,OACIP,EAAAC,EAAAC,cAAA,OAAKM,IAAKF,EAAQC,IAAKA,EAAKE,MAAQF,EAAMJ,UAAW,kBAY9CO,uLAvDP,OADAC,QAAQC,IAAIC,KAAKC,OAEbd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAACE,EAAD,CAAaE,OAAQO,KAAKC,MAAMR,OAASC,IAAKM,KAAKC,MAAML,SAE7DT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,UAAKW,KAAKC,MAAML,MAAhB,KACAT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACVU,KAAKC,MAAMf,OAAOgB,IAAI,SAACC,EAAOC,GAAR,OACnBjB,EAAAC,EAAAC,cAACL,EAAD,CAAYE,OAAQiB,EAAOE,IAAKD,OAExCjB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,mBACZU,KAAKC,MAAMK,mBAvBZC,aCmILC,6MArGbC,MAAQ,KAuDRC,gCAAa,SAAAC,IAAA,IAAAC,EAAA,OAAAC,EAAAzB,EAAA0B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUC,EAAKC,WADf,OACLP,EADKG,EAAAK,KAEXF,EAAKG,SACH,CACET,OAAQA,IAJD,wBAAAG,EAAAO,SAAAX,EAAAX,WASbmB,SAAW,WACT,OAAOI,MAAM,yDACVC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKf,SACvBgB,MAAM,SAAAC,GAAG,OAAI/B,QAAQC,IAAI8B,QAI9BC,cAAgB,WACd,IAAMlB,EAASM,EAAKT,MAAMG,OAAOV,IAAI,SAAC6B,EAAOC,GAE3C,OADAlC,QAAQC,IAAIa,GACLzB,EAAAC,EAAAC,cAAC4C,EAAD,CACLrC,MAAOmC,EAAMnC,MACbH,OAAQsC,EAAMG,mBACd7B,IAAK0B,EAAMI,GACXjD,OAAQ6C,EAAM7C,OACdoB,SAAUyB,EAAMzB,aAIpB,OAAOM,uFA9DPd,QAAQC,IAAI,mEA6BZC,KAAKU,8CAoCE,IACAE,EAAUZ,KAAKS,MAAfG,OACP,OACEzB,EAAAC,EAAAC,cAAA,OAAKC,UAAWsB,EAAQ,MAAQ,gBAK7BA,EAASZ,KAAK8B,gBAAkB,kBAjGvBvB,aCrBE6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,KAAK,SAAAyB,GACjCA,EAAaC","file":"static/js/main.299e3839.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","\r\nimport React, { Component } from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport './Movie.css';\r\n\r\nclass Movie extends Component {\r\n\r\n    static propTypes = {\r\n        title: PropTypes.string.isRequired,\r\n        poster: PropTypes.string.isRequired,\r\n        genres: PropTypes.string.isRequired,\r\n        synopsis: PropTypes.string.isRequired,\r\n    }\r\n    \r\n    render() {\r\n        console.log(this.props);\r\n        return (\r\n            <div className=\"Movie\">\r\n                <div className=\"Movie__Columns\">\r\n                    <MoviePoster poster={this.props.poster}  alt={this.props.title}/>\r\n                </div>\r\n                <div className=\"Movie__Columns\">\r\n                    <h1>{this.props.title} </h1>\r\n                    <div className=\"Movie__Genres\">\r\n                        {this.props.genres.map((genre, index) =>\r\n                            <MovieGenre genres={genre} key={index}/> )}\r\n                    </div>\r\n                    <p className=\"Movie__Synopsis\">\r\n                    {this.props.synopsis}\r\n                    </p>\r\n\r\n                </div>\r\n\r\n\r\n                {/* jsx의 경우 명령어를 실행하려면 꼭 괄호를 넣어야함. */}\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction MovieGenre({ genres }) {\r\n    return (\r\n        <span className=\"Movie__Genre\">{genres} </span>\r\n    )\r\n}\r\n\r\n// class MoviePoster extends Component{\r\n//     static propTypes ={\r\n//         poster : PropTypes.string.isRequired\r\n//     }\r\n//     render(){\r\n//         return(\r\n//             <img src={this.props.poster} alt = \"Movie Poster\"/>\r\n//         )\r\n//     }\r\n// }\r\nfunction MoviePoster({ poster, alt }) {\r\n    return (\r\n        <img src={poster} alt={alt} title ={alt}  className =\"Movie__Poster\"/>\r\n    )\r\n}\r\n\r\nMoviePoster.propTypes = {\r\n    poster: PropTypes.string.isRequired,\r\n    alt: PropTypes.string.isRequired\r\n}\r\nMovieGenre.propTypes = {\r\n    genres: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Movie","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Movie from './Movie';\r\n\r\nconst movieTitles = [\r\n  \"Matrix\",\r\n  \"Full Metal Jacket\",\r\n  \"Oldboy\",\r\n  \"Star Wars\"\r\n];\r\n\r\nconst movieImage = [];\r\n\r\n// const movies = [\r\n//   {\r\n\r\n//     title: \"Matrix\",\r\n//     poster: \"https://t1.daumcdn.net/cfile/tistory/99256D3359D0C7D02A\"\r\n//   },\r\n//   {\r\n//     title: \"Matrix\",\r\n//     poster: \"https://t1.daumcdn.net/cfile/tistory/99256D3359D0C7D02A\"\r\n//   },\r\n//   {\r\n//     title: \"Matrix\",\r\n//     poster: \"https://t1.daumcdn.net/cfile/tistory/99256D3359D0C7D02A\"\r\n//   },\r\n// ];\r\n// Render  : componentWillMount () => render => compoonentDidMount()\r\n// Update :  compoenent Will ReceiveProps() -> ShouldComponentUpdate() -> CompoenetWillUpdate -> render -> componentDidUpdate \r\n// State : React 컴포넌트 안에 있는 오브젝트, 컴포넌트 안에 State가 바뀔때 마다, 다시 Render 수행 \r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n    // greeting: \"Hello\",\r\n    // movies: [\r\n    //   {\r\n\r\n    //     title: \"Matrix\",\r\n    //     poster: \"https://t1.daumcdn.net/cfile/tistory/99256D3359D0C7D02A\"\r\n    //   },\r\n    //   {\r\n    //     title: \"Matrix\",\r\n    //     poster: \"https://t1.daumcdn.net/cfile/tistory/99256D3359D0C7D02A\"\r\n    //   },\r\n    //   {\r\n    //     title: \"Matrix\",\r\n    //     poster: \"https://t1.daumcdn.net/cfile/tistory/99256D3359D0C7D02A\"\r\n    //   },\r\n    // ],\r\n\r\n  }\r\n\r\n  componentWillMount() {\r\n    //api에 작업 요청\r\n    console.log(\"componentWillMuount\")\r\n  }\r\n\r\n  componentDidMount() {\r\n    //render후 작업 처리 \r\n    // setTimeout(() => {\r\n    //   this.setState({\r\n    //     movies: [\r\n    //       {\r\n    //         title: \"Matrix\",\r\n    //         poster: \"https://t1.daumcdn.net/cfile/tistory/99256D3359D0C7D02A\"\r\n    //       },\r\n    //       {\r\n    //         title: \"Matrix\",\r\n    //         poster: \"https://t1.daumcdn.net/cfile/tistory/99256D3359D0C7D02A\"\r\n    //       },\r\n    //       {\r\n    //         title: \"Matrix\",\r\n    //         poster: \"https://t1.daumcdn.net/cfile/tistory/99256D3359D0C7D02A\"\r\n    //       },\r\n    //     ],\r\n    //   })\r\n    //   //State는 직접 변경할 수 없고 setState를 통해 데이터 변경 처리 가능 .\r\n    //   this.setState({\r\n    //     greeting: \"someting\"\r\n    //   })\r\n\r\n    // }, 5000)\r\n\r\n    this._getMovies();\r\n\r\n  }\r\n\r\n  _getMovies = async () => {\r\n    const movies = await this._callApi()\r\n    this.setState(\r\n      {\r\n        movies: movies,\r\n      }\r\n    )\r\n  }\r\n\r\n  _callApi = () => {\r\n    return fetch(\"https://yts.am/api/v2/list_movies.json?sort_by=rating\")\r\n      .then(response => response.json())\r\n      .then(json => json.data.movies)\r\n      .catch(err => console.log(err))\r\n  }\r\n\r\n\r\n  _renderMovies = () => {\r\n    const movies = this.state.movies.map((movie, _) => {\r\n      console.log(movies)\r\n      return <Movie\r\n        title={movie.title}\r\n        poster={movie.medium_cover_image}\r\n        key={movie.id}\r\n        genres={movie.genres}\r\n        synopsis={movie.synopsis}\r\n      />\r\n    })\r\n    // const movies = [<Movie props />, <Movie props />]\r\n    return movies\r\n  }\r\n\r\n  render() {\r\n    const {movies} = this.state;\r\n    return (\r\n      <div className={movies? \"App\" : \"App--loading\"}>\r\n        {/* {this.state.greeting} */}\r\n        {/* {this.state.movies.map((movie, index) => {\r\n          return <Movie title={movie.title} poster={movie.poster} key={index} />\r\n        })} */}\r\n        {movies ? this._renderMovies() : 'Loading'}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}